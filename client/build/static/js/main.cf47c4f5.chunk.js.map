{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RenderBlog","post","console","log","title","body","App","useState","setTitle","setBody","posts","setPosts","getBlogPost","axios","get","then","response","data","catch","alert","useEffect","displayBlog","map","key","index","className","onSubmit","e","preventDefault","payload","url","method","type","name","onChange","event","value","target","placeholder","cols","rows","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qOAGMA,EAAa,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEnB,OADAC,QAAQC,IAAI,sBAAuBF,GAEjC,6BACE,4BAAKA,EAAKG,OACV,2BAAIH,EAAKI,QAgGAC,MAzFf,WAAgB,IAAD,EAEcC,mBAAS,IAFvB,mBAENH,EAFM,KAECI,EAFD,OAGUD,mBAAS,IAHnB,mBAGNF,EAHM,KAGDI,EAHC,OAIWF,mBAAS,IAJpB,mBAING,EAJM,KAIAC,EAJA,KAePC,EAAc,WAClBC,IAAMC,IAAI,QACTC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtBN,EAASM,GACTf,QAAQC,IAAI,gBAAiBO,MAE9BQ,OAAM,WACLC,MAAM,6BA4BVC,qBAAU,WACRR,MACC,IAEHV,QAAQC,IAAI,OAAQO,GAEpB,IAAMW,EAAcX,EAAMY,KAAI,SAACrB,GAC3B,OAEE,kBAAC,EAAD,CAAYsB,IAAOtB,EAAKuB,MAAOvB,KAAQA,OAM7C,OADAC,QAAQC,IAAIC,EAAMC,EAAMK,GAEtB,yBAAKe,UAAU,OACb,iDACA,0BAAMC,SA1CK,SAACC,GACdA,EAAEC,iBAEF,IAAMC,EAAU,CACdzB,MAAOA,EACPC,KAAMA,GAGRQ,IAAM,CACJiB,IAAI,YACJC,OAAO,OACPd,KAAKY,IAENd,MAAK,WACJb,QAAQC,IAAI,oCACZS,OAGDM,OAAM,WACLhB,QAAQC,IAAI,+BAwBV,yBAAKsB,UAAU,cACb,2BAAOO,KAAK,OAAQC,KAAK,QAAQC,SAjEpB,SAACC,GACpB,IACMC,EADSD,EAAME,OACAD,MACrB5B,EAAS4B,IA8DsDA,MAAShC,EAAOkC,YAAY,WAEvF,yBAAKb,UAAU,cACb,8BAAUQ,KAAK,OAAQM,KAAK,KAAKC,KAAK,KAAKJ,MAAO/B,EAAM6B,SA/D7C,SAACP,GAClBlB,EAAQkB,EAAEU,OAAOD,QA8DmEE,YAAY,UAG5F,2CAEF,yBAAKb,UAAU,SACZJ,KCnFWoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdrC,OAAM,SAAAsC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.cf47c4f5.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst RenderBlog = ({post}) => {\n  console.log(\"here in render blog\", post)\n  return (\n    <div>\n      <h3>{post.title}</h3>\n      <p>{post.body}</p>\n    </div>\n  )\n}\n\n\n\nfunction App() {\n\n  const [title, setTitle]  = useState('');\n  const [body,setBody] = useState('');\n  const [posts,setPosts] =useState([])\n\n  const handleChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    setTitle(value)\n  }\n  const handleBody = (e) => {\n    setBody(e.target.value)\n  }\n\n  const getBlogPost = () => {\n    axios.get('/api')\n    .then((response) => {\n      const data = response.data;\n      setPosts(data)\n      console.log('data received', posts)\n    })\n    .catch(() => {\n      alert('error retreiving data')\n    })\n  }\n\n  const submit = (e) => {\n    e.preventDefault()\n\n    const payload = {\n      title: title,\n      body: body\n    }\n\n    axios({\n      url:'/api/save',\n      method:'POST',\n      data:payload\n    })\n    .then(() => {\n      console.log(\"data has been sent to the server\")\n      getBlogPost();\n\n    })\n    .catch(() => {\n      console.log(' internal server error')\n    })\n\n  }\n\n  useEffect(() => {\n    getBlogPost();\n  }, [])\n\n  console.log('meeh', posts)\n\n  const displayBlog = posts.map((post) => {\n      return (\n        // <div>pee</div>\n        <RenderBlog key = {post.index} post = {post} />\n      )\n    });\n\n\n  console.log(title,body, posts)\n  return (\n    <div className=\"App\">\n      <h2>Welcome to my App</h2>\n      <form onSubmit={submit}>\n        <div className=\"form-input\">\n          <input type=\"text\"  name=\"title\" onChange={handleChange} value = {title} placeholder=\"title\"/>\n        </div>\n        <div className=\"form-input\">\n          <textarea name=\"body\"  cols=\"30\" rows=\"10\" value={body} onChange={handleBody} placeholder=\"body\"></textarea>\n        </div>\n\n        <button>Submit</button>\n      </form>\n      <div className=\"blog-\">\n        {displayBlog}\n        {/* <DisplayBlogPost posts = {posts} /> */}\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}